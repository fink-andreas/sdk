<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>SMTP</title>
    <link rel="stylesheet" href="../../web/lib/innovaphone.doc.css" type="text/css" />
</head>

<body>
    <h1>SMTP</h1>
    <p>
        Smtp is a library, which provides the service to send emails using SMTP.
        
    </p>

    <!-- ---------------------------------------------------------------------- -->
    <hr /><h2>Initialization</h2>
    <!-- ---------------------------------------------------------------------- -->
    <p>
        In the App main the SMTP provider is created, using the function call
    </p>

    <pre>ISmtpProvider * smtpProvider = CreateSmtpProvider()</pre>

    <p>In the App instance header</p>

    <pre>class ISmtp * smtp;</pre>    

    <p>In the App instance constructor</p>

    <pre>this->smtp = smtpProvider->CreateSmtp(class IIoMux * iomux, class IInstanceLog * const log, const char *hostname);</pre>
    
    <p>
        is used to create an Smtp object, which provides the interface functions.
        log is used to log dependent of the log flag LOG_SMTP.
        iomux is used to get de SMTP-server DNS address.
        The socket is connected to the SMTP server here.
    </p>

    <!-- ---------------------------------------------------------------------- -->
    <hr /><h2>Interface Functions</h2>
    <!-- ---------------------------------------------------------------------- -->
    <!-- ---------------------------------------------------------------------- -->
    <h3>virtual class ISmtpSend * CreateSend(const char *from, const char *fromName, const char *subject, const char *data, const char *host, const char *server, const char *userSmtp, const char *password)</h3>

    <p>
        Must be called with the email parameters.
    </p>
    <dl>
        <dt>from</dt>
        <dd>Sender email address.</dd>
        <dt>fromName</dt>
        <dd>Sender name.</dd>
        <dt>subject</dt>
        <dd>Subject for the email.</dd>
        <dt>data</dt>
        <dd>Text that will be sent. The text format is html but plain text could be sent replacing "\n" by "< /br>".</dd>
        <dt>host</dt>
        <dd>Host name from the SMPT server.</dd>
        <dt>server</dt>
        <dd>The SMTP server (for example: sophos.innovaphone.com)</dd>
        <dt>userSmtp</dt>
        <dd>The user of the sender (if authentication is needed).</dd>
        <dt>password</dt>
        <dd>The password of the sender (if authentication is needed).</dd>
    </dl>

    <h3>virtual void SendChunk(const char *attachmentChunk, int sChunk, bool lastChunk)</h3>

    <p>
        Sends a chunk of a attachment. It must be called on TaskProgress.
    </p>
    <dl>
        <dt>attachmentChunk</dt>
        <dd>Chunk of the file that will be attached.</dd>
        <dt>sChunk</dt>
        <dd>Size of the chunk.</dd>
        <dt>lastChunk</dt>
        <dd>Indicates if this is the last chunk of the attachment.</dd>
    </dl>

    <h3>virtual void AddTo(const char *rcpt)</h3>

    <p>
        Add a new receiver to the rcpt list. It should be called at least once before ISmtpSend. 
        The email will be sent to every rcpt if they are reachable (for example, it could be unreachable if your SMTP server is on "Relay Access denied" mode). If none of the receivers is reachable, the email will not be sent.
    </p>
    <dl>
        <dt>rcpt</dt>
        <dd>Receiver email address.</dd>
    </dl>

    <h3>virtual void AddAttachment(const char *attachmentUrl)</h3>

    <p>
        Add a new attachment to the email. It should be called once per attachment.
    </p>
    <dl>
        <dt>attachmentUrl</dt>
        <dd>The filename of the attachment that will be sent.</dd>
    </dl>

    <h3>virtual void Start(class UTask * user)</h3>

    <p>
        Starts the task that sends the email.
    </p>
    <dl>
        <dt>user</dt>
        <dd>User for the callbacks for task completion.</dd>
    </dl>

    <!-- ---------------------------------------------------------------------- -->
    <hr /><h2> Code Example </h2>
    <!-- ---------------------------------------------------------------------- -->
    <!-- ---------------------------------------------------------------------- -->
    
    <pre>
        app::app(IIoMux * const iomux, ISocketProvider * localSocketProvider, IWebserverPluginProvider * const webserverPluginProvider, IDatabaseProvider * databaseProvider, class RegisterService * service, ISmtpProvider * smtpProvider, AppInstanceArgs * args) :
        AppInstance(service, args), taskSmtpInit(this, &app::SmtpInitComplete, &app::SmtpInitFailed)
        {
            ...
            this->smtp = smtpProvider->CreateSmtp(iomux, this, "sophos.innovaphone.com");
            this->logFlags |= LOG_SMTP; // to show the flags generated by the SMTP 
        }

        app::~app()
        {
            if (webserverPlugin) delete webserverPlugin;
            if (smtp) delete smtp;
        }
        
        SendEmail::SendEmail(class App * app):
        taskSmtp(this, &SendEmail::SmtpSendComplete, &SendEmail::SmtpSendFailed, &SendEmail::SmtpSendProgress)
        {        
        }

        SendEmail::~SendEmail()
        {
        }

        void SendEmail::Send()
        {
            ISmtpSend * emailTask = registers->smtp->CreateSend("sender@innovaphone.com", "SenderName", "Subject", "Body of the email...", "sophos", "sophos.innovaphone.com", "usersmtp", "pwd");
            emailTask->AddTo("receiver@innovaphone.com");
            emailTask->AddTo("otherreceiver@innovaphone.com");
            emailTask->AddAttachment("test.txt");
            emailTask->AddAttachment("Fish.png");
            emailTask->AddAttachment("Unbenannt.JPG");
            emailTask->AddAttachment("rfc821.pdf");
            emailTask->Start(&taskSmtp);
        }

        void SendEmail::SmtpSendComplete(class TaskSmtpSend * task)
        {
        }
        void SendEmail::SmtpSendFailed(class TaskSmtpSend * task)
        {
        }
        void SendEmail::SmtpSendProgress(class TaskSmtpSend * task, dword progress)
        {
            //SmtpSendProgress will be called once per attachment added.
            //progress indicates the number of the attachment requested by the task.
            //It starts with "0" for the first filename added.
    
            const char * path;
            switch (progress)
            {
            case 0:
                path = "/.../test.txt";
                break;
            case 1:
                path = "/.../styles.Fish.png";
                break;
            case 2:
                path = "/.../Unbenannt.JPG";
                break;
            case 3:
                path = "/.../rfc821.pdf";
                break;
            default:
                break;
            }

            //This is an example of how the attachment data could be chunked and sent.
            FILE * pFile;
            pFile = fopen(path, "rb");
            long lSize;
            if (pFile == NULL) perror("Error opening file");
            else
            {
                fseek(pFile, 0, SEEK_END);
                lSize = ftell(pFile);
                rewind(pFile);
                bool lastchunk = false;
                int bytesread = 0;
                char * bufferrb;
                while (!feof(pFile))
                {
                    size_t len = 0;
                    bufferrb = (char*)malloc(sizeof(char) * 4096);
                    len = fread(bufferrb, 1, 4096, pFile);
                    bytesread += len;
                    if (bytesread >= lSize) lastchunk = true;
                    registers->smtp->SendChunk(bufferrb, len, lastchunk);
                }
                fclose(pFile);
                free(bufferrb);
            }
        }
     </pre>
    
    
</body>
</html>
