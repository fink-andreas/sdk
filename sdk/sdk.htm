<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>sdk</title>
    <link rel="stylesheet" href="web/lib1/innovaphone.doc.css" type="text/css" />
</head>

<body>
    <h1>The innovaphone App SDK</h1>
    <hr/>
    <h2>Getting Started</h2>
    <h3>Prerequisits</h3>
    <p>
        
	<ul>
	<li>A Microsoft Visual Studio 2013 Professional or Community Edition or later must be installed.</li>
	<li>tools.zip</li>
	<li>sdk.zip</li>
	<li>sdksample.zip</li>
	</ul>
	
    </p>
    <h3>Installing the Tools</h3>
    <p>
        Create a folder e.g. named "c:\tools" and extract all the files from tools.zip into it.
    </p>
    <p>
        Create a system environment variable with the variable name: <i>T</i> and variable value: <i>c:/tools</i> (the same folder defined above).
    </p>
    <h3>Building the sdksample App</h3>
    <p>
        Create a folder (e.g. sample) for the sdksample. Extract all files from the sdksample.zip and sdk.zip into it.
    </p>
    <p>
        Open sample/sdksample.sln with the Visual Studio. Build the project. There are the following targets available:
		<ul>
			<li><b>arm:</b> To build for the App platform. This is selected by default.</li>
			<li><b>arm-debug:</b> To build a debug version for the App platform to debug using gdb.</li>
			<li><b>arm-visual-gdb:</b> To build a debug version for the App platform that can be debugged with gdb by using Visual Studio.
			<li><b>i386:</b> To build for VMWare or Hyper-V App platform.</li>
			<li><b>i386-debug:</b> To build a debug version for the VMWare or Hyper-V App platform, that can be debugged by using gdb.</li>
			<li><b>i386-visual-gdb:</b> To build a debug version for the VMWare or Hyper-V App platform, that can be debugged with gdb by using Visual Studio.
		</ul>
		<b>Note:</b> To use Visual GDB, you need to buy a licence of that tool. More informations can be found on the <a href="http://visualgdb.com/">Visual GDB homepage</a> - innovaphone AG won't give support for Visual GDB itself.
    </p>
	<h3>Creating a new project</h3>
	<p>
		You can create a new project by using the innovaphone Project Setup script. This script
		creates a new project based on the SDKSample sources. To use it, start setup-project.bat (located in sdksample, where the c++ sources can be found) and follow the instructions.<br>
		<b>Note:</b> You must have PowerShell v3 or newer installed to use the script (Windows 10
		comes with PowerShell v5, so there is no need to worry about that). To check if you have
		powershell intalled, press Windows+R and enter powershell. Click on OK. If the shell opens,
		you can verify the version by entering "$PSVersionTable.PSVersion" and pressing enter. Doing
		that, you should get the version informations. (With PowerShell v1, that command leads to
		an error). In case that you have to download a never Version, goto to the <a href="https://msdn.microsoft.com/en-us/powershell">Microsoft PowerShell homepage</a> for additional informations. Be aware that innovaphone won't give support for PowerShell.
	</p>
    <h3>Installing the sdksample App on the App Platform</h3>
    <p>
        To be defined
    </p>
    <h3>Configuring and Starting an App Instance</h3>
    <p>
        To be defined
    </p>
    <h3>Creating your own App</h3>
    <p>
        Take sdksample as a template and rename every occurance of sdksample by your own App name
    </p>
    <h3>Updating the SDK</h3>
    <p>
        When a new version of the SDK is published, copy the content of sdk.zip into your App folder
        replacing all existing files from sdk.zip.
    </p>
    <hr/>
    <h2>Environment</h2>
    <h3>Components</h3>
    <p>
        An innovaphone App consists of the following components:
        <dl>
            <dt>App Service</dt>
            <dd>
                This is a C++ executable, which is installed on the App Platform. It is the binary
                generated by the above build. It contains the actual C++ code and all Web User
                Interface files used on the browser
            </dd>
            <dt>App Instance</dt>
            <dd>
                An App Service can start multiple App Instances. The instances are independent
                of each other and can be used for multiple customers in a cloud configuration, or
                just with different settings on a single PBX. An App Instance has its own
                database, its URL addressing it on the App Platform and a Secret, which is
                shared with the App Object on the PBX for the myPBX Single sign on.
            </dd>
            <dt>App</dt>
            <dd>
                An App consists of an .htm file, which is initially loaded, a .png Icon and
                Javascript and other User interface code. An App Instance can provide multiple
                Apps.
            </dd>
            <dt>App Object</dt>
            <dd>
                For each App to be loaded from myPBX, an App Object must exist in the PBX. The
                App object can be the generic 'App Object' for any App, or it can be part of
                another object. For example the Voicemail Object can be used as App Object
                for a Voicemail App. The password configured in the App Object is used as shared
                secret with the App Instance, so that the PBX can grant users the access to
                the App.
            </dd>
        </dl>
    </p>

    <h3>Common App Service Libraries and Interfaces</h3>
    <p>
        The SDK provides interfaces and libraries for all kinds of services.
        Find a detailed description of the environment to build an App Service in
    </p>
    <a href="common/common.htm">common</a>

    <h3>Web UI Elements</h3>
    <p>
        The SDK provides a library of Javascript user interface elements. Find the documentation about
        these elements in
    </p>
    <a href="web/web.htm">web</a>

    <h3>Debugging</h3>
    <p>
        A short overview over debugging possibilities.
    </p>
    <a href="debugging.htm">debugging</a>
</body>
</html>
